#!/usr/bin/env bundle exec ruby
require "knuckle_cluster"
require "yaml"

if ARGV[0] == 'list'
  KnuckleCluster::Configuration.list
  exit
end

require 'pastel'
pastel = Pastel.new

profile = ARGV[0]
if profile.nil? && STDIN.tty?
  require 'tty-prompt'
  prompt = TTY::Prompt.new
  profile = prompt.select("Which profile should we use?", KnuckleCluster::Configuration.load_data.keys.sort)
end
subcommand = ARGV[1]
if !profile.nil? && subcommand.nil? && STDIN.tty?
  require 'tty-prompt'
  prompt = TTY::Prompt.new
  tunnels = KnuckleCluster::Configuration.load_data[profile]['tunnels']
  shortcuts = KnuckleCluster::Configuration.load_data[profile]['shortcuts']
  choices = {
    'Connect to a CONTAINER': 'containers',
    'Connect to an AGENT': 'agents',
    'Tail the logs on a CONTAINER': 'logs',
    'Run a command on a CONTAINER': 'run',
    'Copy a file to or from a CONTAINER': 'scp',
  }
  if !tunnels.nil?
    tunnels.each do |k, v|
      choices["#{pastel.yellow("tunnel")} #{k}"] = ['tunnel', k]
    end
  end
  if !shortcuts.nil?
    shortcuts.each do |k, v|
      choices["#{pastel.yellow("shortcut")} #{k}"] = ['shortcut', k]
    end
  end
  subcommand = prompt.select("What would you like to do on #{pastel.green(profile)} today?", choices)
end

if !STDIN.tty? && (profile.nil? || subcommand.nil?)
  puts <<~USAGE
    knuckle_cluster list - list all available clusters
    knuckle_cluster CLUSTER_PROFILE agents - list all agents and select one to start a shell
    knuckle_cluster CLUSTER_PROFILE containers - list all containers and select one to start a shell
    knuckle_cluster CLUSTER_PROFILE logs CONTAINER_NAME - tail the logs for a container
    knuckle_cluster CLUSTER_PROFILE CONTAINER_NAME [OPTIONAL COMMANDS] - connect to a container and start a shell or run a command
    knuckle_cluster CLUSTER_PROFILE SHORTCUT_NAME - run a shortcut defined in your knuckle_cluster configuration
    knuckle_cluster CLUSTER_PROFILE tunnel TUNNEL_NAME - open a tunnel defined in your knuckle_cluster configuration
    knuckle_cluster CLUSTER_PROFILE scp source destination - copied a file via scp to or from a container or agent. Use container:<location> or agent:<location>
  USAGE
  exit
end

begin
  config = KnuckleCluster::Configuration.load_parameters(profile: profile)
rescue => e
  puts "ERROR: There was a problem loading your configuration: #{e}"
  exit
end

kc = KnuckleCluster.new(
  **config
)

if subcommand == 'agents'
  kc.connect_to_agents
elsif subcommand == 'containers'
  kc.connect_to_containers
elsif subcommand == 'logs'
  kc.container_logs(name: ARGV[2])
elsif subcommand == 'tunnel'
  kc.open_tunnel(name: ARGV[2])
elsif ARGV[1] == 'scp'
  kc.initiate_scp(source: ARGV[2], destination: ARGV[3])
else
  command = ARGV.drop(2)
  if command.any?
    kc.connect_to_container(name: ARGV[1], command: command.join(' '))
  else
    kc.connect_to_container(name: ARGV[1])
  end
end
